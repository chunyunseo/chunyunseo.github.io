I"j<h1 id="예외처리">예외처리</h1>

<ul>
  <li>모든 Exception은 throwable에서 상속된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//가벼운 throws/try/catch 사용 예제</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">divide</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">ArithmeticException</span>
	<span class="o">{</span>
		<span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="o">;</span>
	<span class="o">}</span>
<span class="c1">//예외를 상위 메서드로 전가시킨다.</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="k">try</span>
		<span class="o">{</span>
			<span class="n">divide</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">catch</span><span class="o">(</span><span class="nc">InputMismatchException</span> <span class="n">e</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Error!"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">catch</span><span class="o">(</span><span class="nc">ArithmeticException</span> <span class="n">e</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>
        <span class="cm">/* 멀티 캐치도 가능하다.
        catch(ArithmeticException | InputMismatchException e)
		{
			System.out.println(e);
		}
		*/</span>
	<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Exception이 잡히지 않으면 thread가 종료된다.(해당 스레드만 죽음)</li>
  <li>
    <p>Checked Exception(명시적으로 처리해야함) &lt;-&gt; Unchecked Exception(RuntimeException)</p>
  </li>
  <li>finally: 항상 실행되는 구문.
    <ul>
      <li>아래코드는 divide(1, 0); divide(2, 1); 어느 경우던지간에 finally를 출력한다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Hello {	
	public static int divide(int a, int b)
			throws ArithmeticException
	{
		return a/b;
	}

	public static void main(String[] args)
	{
		try {
			divide(1, 0);
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
		finally
		{
			System.out.println("finally");
		}
	}
}
</code></pre></div></div>

<ul>
  <li>throw: 에러를 직접 던질 때 사용.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">throw</span> <span class="k">new</span> <span class="nc">Exception</span><span class="o">(</span><span class="s">"Exception!"</span><span class="o">);</span>
</code></pre></div></div>

<h1 id="클래스-간의-관계">클래스 간의 관계</h1>

<ul>
  <li>
    <p>Dependency</p>

    <ul>
      <li>다른 객체를 method네에서 인수나 지역변수로 사용한다.</li>
      <li>한 객체의 method가 다른 객체를 return한다.</li>
      <li>객체 간 관계가 대등하지 않으며, 한 객체의 변화가 다른 객체에 영향을 준다.</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span><span class="o">{}</span>
  
<span class="n">classB</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(</span><span class="no">A</span> <span class="n">arg</span><span class="o">){</span>
		<span class="n">arg</span><span class="o">.</span><span class="na">some</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Association</p>
    <ul>
      <li>객체의 참조가 유지되는 관계.(학생과 교수 등)</li>
      <li>navigability와 multiplicity를 지닌다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span><span class="o">{}</span>

<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="no">A</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">B</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">A</span><span class="o">&gt;</span> <span class="n">arg</span><span class="o">){</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Association/Aggregation <img src="https://raw.githubusercontent.com/chunyunseo/ImageRepo/image/img/image-20210505181245828.png" alt="image-20210505181245828" style="zoom:33%;" />
    <ul>
      <li>어떤 객체의 참조를 가지고 있고, 이 객체 reference는 다른 곳에서 생성된 것을 가져온다.(Life Cycle을 함께하지 않는다.)</li>
      <li>보통 관계에 전체와 부분이 있으면 Aggregation, 아니면 Association이라고 한다.</li>
    </ul>
  </li>
  <li>Compositon <img src="https://raw.githubusercontent.com/chunyunseo/ImageRepo/image/img/image-20210505181154167.png" alt="image-20210505181154167" />
    <ul>
      <li>어떠한 객체의 참조를 지니고 있고, 생성과 소멸의 책임을 진다. LifeCycle의 전체를 함께한다.</li>
      <li>EX) ATM의 키패드, 스크린 등.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
	<span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">A</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="no">B</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/chunyunseo/ImageRepo/image/img/image-20210505181516647.png" alt="image-20210505181516647" /></p>
:ET