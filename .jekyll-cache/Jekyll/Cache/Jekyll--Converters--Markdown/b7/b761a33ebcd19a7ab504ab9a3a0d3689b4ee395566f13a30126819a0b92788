I"x.<ul>
  <li>다운캐스팅
    <ul>
      <li>reference가 가지고 있는 객체를 부를 때, 그 객체가 서브타입이면 서브타입이 불리고, 이 과정을 dynamic binding이라고 한다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>	

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="nc">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Animal</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
		<span class="nc">Eagle</span> <span class="n">eagle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
		
		<span class="n">animal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span> 
		<span class="c1">//다운캐스팅</span>
		
		<span class="c1">//eagle = new Animal("", 3); 에러</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">animal</span><span class="o">.</span><span class="na">getInfo</span><span class="o">());</span>
		<span class="c1">//Eagle의 getInfo가 호출됨.	</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Interface
    <ul>
      <li>공통의 기능성을 강제할 때 사용된다.</li>
    </ul>
  </li>
  <li>Abstract
    <ul>
      <li>만들 수 없는 클래스. 정의되지 않은 메서드를 지니고 있다.</li>
      <li>자세한 정의는 서브클래스들이 한다.</li>
      <li>Constructor와 static 메서드는 abstract로 선언 될 수 없다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Animal</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> 
	<span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getInfo</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Eagle</span> <span class="kd">extends</span> <span class="nc">Animal</span><span class="o">{</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">flyingSpeed</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Eagle</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flyingSpeed</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">flyingSpeed</span> <span class="o">=</span> <span class="n">flyingSpeed</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">//폭탄돌리기 하듯이, 여기서도 abstarct로 선언해도 된다.</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getInfo</span><span class="o">()</span>
	<span class="o">{</span>
		<span class="k">return</span> <span class="s">"This is eagle's info"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li>캐스팅</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="nc">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Animal</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
		<span class="nc">Eagle</span> <span class="n">eagle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
		
		<span class="n">animal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span> 
		<span class="c1">//다운캐스팅</span>
		
		<span class="c1">//eagle = new Animal("", 3); 컴파일 에러</span>
		
		<span class="n">eagle</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Eagle</span><span class="o">)</span><span class="n">animal</span><span class="o">;</span> <span class="c1">//에러 없음</span>
		
		<span class="c1">//eagle = (Eagle)new Animal("", 3); //런타임 에러</span>
</code></pre></div></div>

<ul>
  <li>instanceof</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>	

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="nc">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">animal</span> <span class="k">instanceof</span> <span class="nc">Eagle</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Eagle"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">animal</span> <span class="k">instanceof</span> <span class="nc">Animal</span><span class="o">)</span>
		<span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Animal"</span><span class="o">);</span>
		<span class="o">}</span>
		
	<span class="o">}</span>
<span class="o">}</span>
<span class="c1">//출력결과: </span>
<span class="c1">//Eagle</span>
<span class="c1">//Animal</span>
</code></pre></div></div>

<ul>
  <li>final
    <ul>
      <li>final method는 override가 불가능하다.</li>
      <li>final class는 상속이 불가능하다.</li>
      <li>private/static은 final의 일종으로 볼수도 있다.</li>
    </ul>
  </li>
  <li>Interface
    <ul>
      <li>모든 멤버는 암시적으로 public/static/final이다.</li>
      <li>따라서 인터페이스의 멤버는 상수밖에 있을 수없다.(final/static이니)</li>
      <li>Interface를 implements하면 어떤 subclass도 interface type으로 취급 가능하다.</li>
      <li>abstract는 변수를 가질 수 있지만, interface는 상수만 가질 수 있다.</li>
      <li>default를 사용하면 method의 body를 지닐 수 있고, override도 할 수 있다.(?: 하지만, 이러면 interface의 의미가 있나?)</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Draw</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="nf">draw</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="kd">implements</span> <span class="nc">Draw</span> <span class="o">{</span>
<span class="o">...</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="nc">Draw</span> <span class="n">myInterface</span><span class="o">;</span>
		
		<span class="n">myInterface</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Animal</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
		
		<span class="n">myInterface</span><span class="o">.</span><span class="na">draw</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

:ET