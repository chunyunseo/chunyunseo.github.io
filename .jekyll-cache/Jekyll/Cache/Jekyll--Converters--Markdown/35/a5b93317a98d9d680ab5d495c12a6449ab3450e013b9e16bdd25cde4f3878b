I"<ul>
  <li>Generic: 클래스나 메서드 내부에서 사용한 데이터 타입을 외부해서 지정하는 기법
    <ul>
      <li>실제로는 컴파일러게 제네릭을 만나면 Object로 만들어버리고 자신이 알아서 캐스팅한다. 이는 C++의 동작과 다른데, C++는 실제 카피를 생성한다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="no">T</span><span class="o">[]</span> <span class="n">inputArr</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="no">T</span> <span class="n">item</span> <span class="o">:</span> <span class="n">inputArr</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
<span class="o">{</span>
    <span class="nc">Integer</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
    <span class="n">print</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Comparable
    <ul>
      <li>reference 타입은 부등호가 제대로 작동하지 않음. 따라서 Comprable을 extends 해야함.</li>
      <li>Comparable이 upperbound가 되면서 컴파일러가 T를 Comparable 로 바꿈.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="no">T</span> <span class="nf">max</span><span class="o">(</span><span class="no">T</span> <span class="n">a</span><span class="o">,</span> <span class="no">T</span> <span class="n">b</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="no">T</span> <span class="n">max</span><span class="o">;</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
			<span class="n">max</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
		<span class="k">else</span>
			<span class="n">max</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
		
		<span class="k">return</span> <span class="n">max</span><span class="o">;</span>
	<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Class</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span>
<span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
	<span class="kd">private</span> <span class="no">T</span> <span class="n">weight</span><span class="o">;</span>
	<span class="o">...</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getInfo</span><span class="o">(</span><span class="no">T</span> <span class="n">instruction</span><span class="o">)</span>
	<span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>
</code></pre></div></div>

:ET